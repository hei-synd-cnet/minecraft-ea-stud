package ch.hevs.isi.smartControl;

import ch.hevs.isi.core.BooleanDataPoint;
import ch.hevs.isi.core.DataPoint;
import ch.hevs.isi.core.FloatDataPoint;
import ch.hevs.isi.field.ModbusAccessor;
import ch.hevs.isi.field.PollTask;
import ch.hevs.isi.core.CSVParser;
import java.util.Timer;
import java.util.TimerTask;

public class SmartControl extends TimerTask {

    public static void main(String[] args) {

        /** Connexion*/
        String ip = "10.93.4.250";
        int port = 1502;
        int slaveId = 1;
        ModbusAccessor.getInstance(ip, port, slaveId);
        CSVParser.creatDatapoint();

        /**Pooling management*/
        Timer pollTimer = new Timer();
        pollTimer.scheduleAtFixedRate(new PollTask(), 5000, 2000);
    }

    /** Code for Control Minecraft*/
    @Override
    public void run() {
        System.out.println("Smart Control running");

        /**Time Control*/
        FloatDataPoint clockTime  = (FloatDataPoint) DataPoint.getDataPointFromLabel("CLOCK_FLOAT");
        float day = 0f;
        if (clockTime.getValue() == 1.0f){
            day ++;
        }

        /**Producer Action*/
        FloatDataPoint factorySetPoint = (FloatDataPoint) DataPoint.getDataPointFromLabel("REMOTE_FACTORY_SP");
        FloatDataPoint coalSetPoint = (FloatDataPoint) DataPoint.getDataPointFromLabel("REMOTE_COAL_SP");
        BooleanDataPoint solarSwitch = (BooleanDataPoint) DataPoint.getDataPointFromLabel("REMOTE_SOLAR_SW");
        BooleanDataPoint windSwitch = (BooleanDataPoint) DataPoint.getDataPointFromLabel("REMOTE_WIND_SW");

        /**Consummer Information*/
        FloatDataPoint homeConsumption = (FloatDataPoint) DataPoint.getDataPointFromLabel("HOME_P_FLOAT");
        FloatDataPoint publicConsumption  = (FloatDataPoint) DataPoint.getDataPointFromLabel("PUBLIC_P_FLOAT");

        /**General Information */
        FloatDataPoint batteryLevel = (FloatDataPoint) DataPoint.getDataPointFromLabel("BATT_CHRG_FLOAT");
        FloatDataPoint grid = (FloatDataPoint) DataPoint.getDataPointFromLabel("GRID_U_FLOAT");
        FloatDataPoint batterPower = (FloatDataPoint) DataPoint.getDataPointFromLabel("BATT_P_FLOAT");
        FloatDataPoint solarPower = (FloatDataPoint) DataPoint.getDataPointFromLabel("SOLAR_P_FLOAT");
        FloatDataPoint windPower = (FloatDataPoint) DataPoint.getDataPointFromLabel("WIND_P_FLOAT");
        FloatDataPoint coalPower = (FloatDataPoint) DataPoint.getDataPointFromLabel("COAL_P_FLOAT");
        FloatDataPoint coalAmount = (FloatDataPoint) DataPoint.getDataPointFromLabel("COAL_AMOUNT");
        FloatDataPoint factoryPower = (FloatDataPoint) DataPoint.getDataPointFromLabel("FACTORY_P_FLOAT");
        FloatDataPoint bunkerPower = (FloatDataPoint) DataPoint.getDataPointFromLabel("BUNKER_P_FLOAT");
        FloatDataPoint windValue = (FloatDataPoint) DataPoint.getDataPointFromLabel("WIND_FLOAT");
        FloatDataPoint weatherValue = (FloatDataPoint) DataPoint.getDataPointFromLabel("WEATHER_FLOAT");
        FloatDataPoint currentWeather = (FloatDataPoint) DataPoint.getDataPointFromLabel("WEATHER_FORECAST_FLOAT");
        FloatDataPoint weatherCountdown = (FloatDataPoint) DataPoint.getDataPointFromLabel("WEATHER_COUNTDOWN_FLOAT");

        FloatDataPoint factoryEnergy = (FloatDataPoint) DataPoint.getDataPointFromLabel("FACTORY_ENERGY");
        FloatDataPoint score = (FloatDataPoint) DataPoint.getDataPointFromLabel("SCORE");
        FloatDataPoint factoryState = (FloatDataPoint) DataPoint.getDataPointFromLabel("FACTORY_ST");
        FloatDataPoint coalState = (FloatDataPoint) DataPoint.getDataPointFromLabel("COAL_ST");


        /**Calculation total power consumption*/
        float totalConsumption = homeConsumption.getValue() + publicConsumption.getValue() + factoryPower.getValue() + bunkerPower.getValue();

        /**Calculate the total power generated by renewable sources*/
        float renewableGeneration = solarPower.getValue() + windPower.getValue();

        /** Calculate the power deficit relative to the total consumption*/
        float powerDeficit = totalConsumption - renewableGeneration;

        /**Deficit -> Use Coal*/
        if (powerDeficit > 0) {
            if (coalAmount.getValue() > 40f) {
                coalSetPoint.setValue(0.8f);
            } else if (coalAmount.getValue() <= 40 && coalAmount.getValue() > 15) {
                coalSetPoint.setValue(0.6f);
            } else if (coalAmount.getValue() <= 15) {
                coalSetPoint.setValue(0.1f);
            }


            /**Check the DC grid voltage*/
            float gridVoltage = grid.getValue();
                /**Reduce production to decrease voltage*/
                if (gridVoltage > 910.0f) {
                    factorySetPoint.setValue(1f); // Stop factory production
                    coalSetPoint.setValue(0.0f); // Stop coal production
                    solarSwitch.setValue(false); // Disable solar panels
                    windSwitch.setValue(false); // Disable wind turbines
                }

                /**Increase production to increase voltage*/
                else if(gridVoltage < 800){
                    factorySetPoint.setValue(0f); // Maximize factory production
                    coalSetPoint.setValue(1.0f); // Maximize coal production
                    solarSwitch.setValue(true); // Enable solar panels
                    windSwitch.setValue(true); // Enable wind turbines
                }
            }

            /**Check battery state of charge*/
            if (batteryLevel.getValue() < 0.6f) {
                /** Battery almost empty, take measures to recharge it*/
                solarSwitch.setValue(true);
                windSwitch.setValue(true);
                factorySetPoint.setValue(0.0f);
                coalSetPoint.setValue(1.0f);
            } else if (batteryLevel.getValue() > 0.95f) {
                /**Battery almost full, take measures to discharge it*/
                solarSwitch.setValue(false);
                windSwitch.setValue(false);
                factorySetPoint.setValue(1.0f);
                coalSetPoint.setValue(0.0f);
            }

            /**Check weather conditions*/
            switch ((int) currentWeather.getValue()) {
                case 0: /**Clear*/
                    solarSwitch.setValue(true);
                    windSwitch.setValue(true);
                    break;
                case 1: /**Rain*/
                    solarSwitch.setValue(false);
                    windSwitch.setValue(true);
                    break;
                case 2: /**Thunder*/
                    solarSwitch.setValue(false);
                    windSwitch.setValue(false);
                    break;
            }

            /**Adjust factory production based on battery level*/
            if (batteryLevel.getValue() > 0.7f && batteryLevel.getValue() <= 0.9f) {
                factorySetPoint.setValue(0.94f);
            } else if (batteryLevel.getValue() > 0.5f && batteryLevel.getValue() <= 0.7f) {
                factorySetPoint.setValue(0.4f);
            } else if (batteryLevel.getValue() > 0.3f && batteryLevel.getValue() <= 0.5f) {
                factorySetPoint.setValue(0.15f);
            } else if (batteryLevel.getValue() > 0.25f && batteryLevel.getValue() <= 0.3f) {
                factorySetPoint.setValue(0.05f);
            } else if (batteryLevel.getValue() <= 0.25f) {
                factorySetPoint.setValue(0.0f);
            }
        }
    }






